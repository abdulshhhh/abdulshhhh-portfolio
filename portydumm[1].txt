<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Abdul Kamil - Portfolio</title>
    <link rel="icon" type="image/png" href="portpic.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/MotionPathPlugin.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/DrawSVGPlugin.min.js"></script>
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
    <!-- Particles.js Library -->
<script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>

<!-- Optional: AOS Animation Library -->
<script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
<link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <style>
        /* Global Styles */
        
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');

        /* Experience Section Styles */
        /* COSMIC EXPERIENCE SECTION STYLES - UNIVERSE EDITION */
.neon-bg {
  background-color: #050518;
  background-image: 
    radial-gradient(circle at 10% 20%, rgba(83, 28, 252, 0.3) 0%, rgba(28, 175, 252, 0) 30%),
    radial-gradient(circle at 90% 80%, rgba(249, 42, 159, 0.3) 0%, rgba(249, 42, 159, 0) 30%),
    radial-gradient(circle at 50% 50%, rgba(5, 5, 30, 1) 0%, rgba(0, 0, 10, 1) 100%),
    url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='rgba(255,255,255,0.03)' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
  position: relative;
  overflow: hidden;
  padding: 150px 0;
  z-index: 0;
}

.neon-bg::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: 
    linear-gradient(45deg, #ff00cc, #3333ff, #00ccff, #7700ff, #ff00cc);
  background-size: 400% 400%;
  opacity: 0.08;
  animation: cosmicGradient 20s ease infinite;
  filter: blur(60px);
  z-index: -1;
}

.neon-bg::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
  z-index: -1;
  opacity: 0.1;
}

@keyframes cosmicGradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

@keyframes cosmicPulse {
  0%, 100% { opacity: 0.8; transform: scale(1); }
  50% { opacity: 1; transform: scale(1.05); filter: blur(1px); }
}

.cosmic-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.03' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='1'/%3E%3Ccircle cx='13' cy='13' r='1'/%3E%3C/g%3E%3C/svg%3E");
  z-index: 0;
  mix-blend-mode: soft-light;
  pointer-events: none;
}

.nebula {
  position: absolute;
  border-radius: 50%;
  filter: blur(30px);
  opacity: 0.15;
  background: radial-gradient(circle, rgba(255,0,255,0.8), rgba(0,255,255,0.4), transparent 70%);
  animation: nebulaPulse 10s infinite alternate ease-in-out;
  z-index: 0;
  pointer-events: none;
}

@keyframes nebulaPulse {
  0% { opacity: 0.1; transform: scale(1); }
  100% { opacity: 0.2; transform: scale(1.2); }
}

/* Create multiple nebula effects */
.nebula-1 {
  top: 20%;
  left: 10%;
  width: 400px;
  height: 400px;
  animation-delay: 0s;
}

.nebula-2 {
  bottom: 10%;
  right: 5%;
  width: 500px;
  height: 500px;
  background: radial-gradient(circle, rgba(153,0,255,0.6), rgba(0,255,255,0.3), transparent 70%);
  animation-delay: 3s;
}

.nebula-3 {
  top: 60%;
  left: 50%;
  width: 300px;
  height: 300px;
  background: radial-gradient(circle, rgba(255,0,128,0.6), rgba(255,153,0,0.3), transparent 70%);
  animation-delay: 5s;
}

#experience .section-title {
  text-align: center;
  font-size: 64px;
  font-weight: 800;
  margin-bottom: 80px;
  position: relative;
  letter-spacing: 3px;
  font-family: 'Orbitron', sans-serif;
  text-transform: uppercase;
  z-index: 2;
  overflow: hidden;
}

#experience .section-title .title-text {
  background: linear-gradient(to right, #fff 5%, #99f9ff 20%, #fff 40%, #e64dff 60%, #fff 80%);
  background-size: 200% auto;
  color: #000;
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: cosmicShine 5s linear infinite;
  text-shadow: 0 0 10px rgba(255, 255, 255, 0.1),
               0 0 20px rgba(51, 51, 255, 0.1),
               0 0 30px rgba(0, 204, 255, 0.1);
}

@keyframes cosmicShine { 
  to { background-position: 200% center; }
}

#experience .section-title::before {
  content: '';
  position: absolute;
  top: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 150px;
  height: 5px;
  background: linear-gradient(90deg, transparent, #00ccff, #ff00cc, transparent);
  z-index: -1;
}

#experience .section-title::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 200px;
  height: 5px;
  background: linear-gradient(90deg, transparent, #ff00cc, #00ccff, transparent);
  z-index: -1;
}

.neon-dot {
  position: relative;
  color: #0ff;
  text-shadow: 0 0 10px #0ff, 0 0 20px #0ff, 0 0 30px #0ff;
  animation: neonBlink 4s infinite;
  font-size: 120%;
}

@keyframes neonBlink {
  0%, 19.999%, 22%, 62.999%, 64%, 64.999%, 70%, 100% { 
    opacity: 1;
    text-shadow: 0 0 10px #0ff, 0 0 20px #0ff, 0 0 30px #0ff, 0 0 40px #0ff;
  }
  20%, 21.999%, 63%, 63.999%, 65%, 69.999% { 
    opacity: 0.4;
    text-shadow: none;
  }
}

.particles-container {
  position: relative;
  min-height: 500px;
}

#particles-js {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
}

.experience-cards {
  position: relative;
  z-index: 2;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 50px;
  max-width: 1400px;
  margin: 0 auto;
  perspective: 1500px;
}

.experience-card {
  background: rgba(5, 5, 25, 0.7);
  backdrop-filter: blur(15px);
  border-radius: 20px;
  padding: 40px;
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  border: 1px solid rgba(255, 255, 255, 0.08);
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5),
              0 0 15px rgba(28, 175, 252, 0.2),
              0 0 5px rgba(249, 42, 159, 0.2);
  position: relative;
  overflow: hidden;
  transform-style: preserve-3d;
  transform: translateZ(0) perspective(1000px);
}

.experience-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 5px;
  background: linear-gradient(90deg, #ff00cc, #3333ff, #00ccff, #ff00cc);
  background-size: 300% 300%;
  animation: cosmic-border 8s linear infinite;
  z-index: 2;
}

.glow-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 20px;
  background: radial-gradient(circle at 50% 50%, rgba(128, 0, 255, 0.15), transparent 60%);
  opacity: 0;
  transition: opacity 0.5s ease;
  pointer-events: none;
  z-index: 1;
}

.experience-card:hover .glow-overlay {
  opacity: 0;
}

.card-shine {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.03) 50%, rgba(255,255,255,0) 100%);
  transform: translateY(100%) rotate(25deg);
  transition: transform 0.5s ease;
  pointer-events: none;
}

.experience-card:hover .card-shine {
  transform: translateY(-100%) rotate(25deg);
  transition: transform 1s ease;
}

@keyframes cosmic-border {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.experience-card::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: 20px;
  padding: 1px;
  background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0), rgba(255,255,255,0.05), rgba(255,255,255,0));
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  pointer-events: none;
}

.experience-card:hover {
  transform: translateY(-20px) scale(1.03) rotateX(5deg);
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5), 
              0 0 30px rgba(28, 175, 252, 0.35),
              0 0 40px rgba(249, 42, 159, 0.25);
  border: 1px solid rgba(255, 255, 255, 0.15);
}

.card-icon {
  font-size: 46px;
  margin-bottom: 30px;
  background: rgba(10, 10, 25, 0.7);
  width: 100px;
  height: 100px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid rgba(255, 255, 255, 0.15);
  box-shadow: 0 0 30px rgba(28, 175, 252, 0.3),
              0 0 15px rgba(249, 42, 159, 0.2);
  position: relative;
  z-index: 2;
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.card-icon::before {
  content: '';
  position: absolute;
  inset: -3px;
  border-radius: 50%;
  background: conic-gradient(
    from 0deg,
    #ff00cc,
    #3333ff,
    #00ccff,
    #ff00cc
  );
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  animation: rotate 4s linear infinite;
  z-index: -1;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.card-icon::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: 50%;
  background: radial-gradient(circle at 30% 30%, rgba(255,255,255,0.1), transparent);
  z-index: 2;
  pointer-events: none;
}

.experience-card:hover .card-icon {
  transform: scale(1.15) translateZ(50px);
  box-shadow: 0 0 40px rgba(28, 175, 252, 0.5),
              0 0 25px rgba(249, 42, 159, 0.3);
}

.experience-card h3 {
  color: #fff;
  font-size: 28px;
  font-weight: 700;
  margin-bottom: 15px;
  background: linear-gradient(to right, #fff 0%, #99f9ff 50%, #e64dff 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  position: relative;
  z-index: 2;
  transition: all 0.3s ease;
}

.experience-card:hover h3 {
  transform: translateZ(30px);
  letter-spacing: 0.5px;
  text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
}

.experience-card h4 {
  color: #0ff;
  font-size: 20px;
  font-weight: 600;
  margin-bottom: 20px;
  transition: all 0.3s ease;
  text-shadow: 0 0 8px rgba(0, 255, 255, 0.4);
  position: relative;
  z-index: 2;
}

.experience-card:hover h4 {
  transform: translateZ(20px);
  color: #6afdff;
  text-shadow: 0 0 12px rgba(0, 255, 255, 0.6);
}

.experience-card p {
  color: rgba(255, 255, 255, 0.75);
  margin-bottom: 25px;
  line-height: 1.8;
  position: relative;
  z-index: 2;
  transition: all 0.3s ease;
  font-size: 16px;
}

.experience-card:hover p {
  transform: translateZ(15px);
  color: rgba(255, 255, 255, 0.95);
}

.tech-stack {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  margin-top: 20px;
  position: relative;
  z-index: 2;
}

.tech-stack span {
  background: linear-gradient(135deg, rgba(255, 0, 204, 0.2), rgba(51, 51, 255, 0.2));
  color: #fff;
  padding: 8px 16px;
  border-radius: 30px;
  font-size: 14px;
  font-weight: 500;
  border: 1px solid rgba(255, 255, 255, 0.15);
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  position: relative;
  overflow: hidden;
  text-shadow: 0 0 8px rgba(255, 255, 255, 0.4);
}

.tech-stack span::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.05) 25%,
    rgba(255, 255, 255, 0.1) 50%,
    rgba(255, 255, 255, 0.05) 75%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(45deg);
  animation: shine 3s infinite;
  z-index: 1;
  pointer-events: none;
}

@keyframes shine {
  0% { transform: translateX(-100%) rotate(45deg); }
  15%, 100% { transform: translateX(100%) rotate(45deg); }
}

.tech-stack span:hover {
  background: linear-gradient(135deg, rgba(255, 0, 204, 0.4), rgba(51, 51, 255, 0.4));
  transform: translateY(-5px) scale(1.1);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4),
              0 0 15px rgba(51, 51, 255, 0.4);
  text-shadow: 0 0 10px rgba(255, 255, 255, 0.6);
  z-index: 3;
}


  #experience .section-title {
    font-size: 40px;
    margin-bottom: 50px;
  }
  
  .experience-card {
    padding: 30px;
  }

#education {
    padding: 100px 0;
    /* Remove the background gradient */
    /* background: radial-gradient(circle, #0d001a 10%, #150050 90%); */
    text-align: center;
    position: relative;
    overflow: hidden;
}

/* Particle Container */
#particles-js {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
    pointer-events: none;
}

.container {
    position: relative;
    z-index: 1;
}

/* Section Title */
.section-title {
    font-size: 3rem;
    font-weight: bold;
    font-family: "Orbitron", sans-serif;
    color: #ff0099;
    text-transform: uppercase;
    text-shadow: 0 0 20px #ff0099, 0 0 40px #ff0099;
    animation: flicker 1.5s infinite alternate;
}

@keyframes flicker {
    0% { opacity: 1; }
    50% { opacity: 0.8; text-shadow: 0 0 10px #ff0099; }
    100% { opacity: 1; }
}

/* Education Item */
.education-item {
    background: rgba(10, 10, 40, 0.9);
    border: 2px solid rgba(255, 0, 153, 0.6);
    border-radius: 20px;
    padding: 30px;
    width: 85%;
    max-width: 600px;
    box-shadow: 0 0 30px rgba(255, 0, 153, 0.8);
    transition: transform 0.4s ease, box-shadow 0.4s ease;
    text-align: center;
    position: relative;
    backdrop-filter: blur(10px);
    margin: 20px auto;
}

.education-item:hover {
    transform: scale(1.1);
    box-shadow: 0 0 50px rgba(255, 0, 153, 1);
}

.education-item h3 {
    font-size: 2rem;
    color: #00eaff;
    text-shadow: 0 0 10px #00eaff;
}

.education-item p {
    font-size: 1.3rem;
    color: #d1d1d1;
    line-height: 1.6;
}

.year {
    display: inline-block;
    background: linear-gradient(90deg, #ff00ff, #00eaff);
    color: #0d0d0d;
    padding: 7px 20px;
    font-weight: bold;
    border-radius: 25px;
    box-shadow: 0 0 15px #00eaff;
    font-family: "Orbitron", sans-serif;
}

@media (max-width: 768px) {
    .section-title {
        font-size: 2.2rem;
    }
    .education-item {
        width: 95%;
        padding: 25px;
    }
}

 Section */
#projects {
    padding: 80px 0;
    /* Remove the background gradient */
    /* background: linear-gradient(135deg, #0d0d0d, #1a1a1a); */
    text-align: center;
}

/* Section Title */
.section-title {
    font-size: 2.5rem;
    font-weight: bold;
    color: #00eaff;
    margin-bottom: 40px;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-shadow: 0 0 10px #00eaff, 0 0 20px #00eaff;
}

/* Project Grid */
.project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    justify-content: center;
    padding: 20px;
}

/* Project Card */
.project-card {
    background: rgba(15, 15, 15, 0.8);
    border: 1px solid rgba(0, 255, 255, 0.3);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    overflow: hidden;
    text-align: left;
}

/* Project Card Hover Effect */
.project-card:hover {
    transform: translateY(-10px) scale(1.05);
    box-shadow: 0 0 25px rgba(0, 255, 255, 0.6);
}

/* Project Image */
.project-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 10px;
    border: 2px solid rgba(0, 255, 255, 0.5);
}

/* Project Info */
.project-info {
    padding: 15px 0;
}

.project-info h3 {
    font-size: 1.5rem;
    color: #00eaff;
    margin-bottom: 10px;
    text-shadow: 0 0 5px #00eaff;
}

.project-info p {
    font-size: 1rem;
    color: #ccc;
    line-height: 1.6;
}

/* Tech Stack */
.tech-stack {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 10px;
}

.tech-stack span {
    background: rgba(0, 255, 255, 0.3);
    color: #00eaff;
    padding: 5px 10px;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: bold;
    text-shadow: 0 0 5px #00eaff;
}

/* View Project Button */
.btn {
    display: inline-block;
    margin-top: 15px;
    padding: 10px 15px;
    background: #00eaff;
    color: #0d0d0d;
    text-decoration: none;
    font-weight: bold;
    border-radius: 5px;
    transition: background 0.3s ease, transform 0.2s ease;
    text-shadow: 0 0 5px #0ff;
}

.btn:hover {
    background: #0077ff;
    transform: scale(1.1);
    box-shadow: 0 0 10px #0077ff;
}

/* Responsive */
@media (max-width: 768px) {
    .section-title {
        font-size: 2rem;
    }
    .project-card {
        padding: 15px;
    }
}

        :root {
            --primary-color: rgb(249, 18, 145);
            --secondary-color: #0a0a1a;
            --accent-color: #6366f1;
            --card-bg: #1a1a2e;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: linear-gradient(135deg, #0a0a1a 0%, #1a1a2e 100%);
            color: white;
            overflow-x: hidden;
            position: relative;
        }

        /* Background Effects */
        .background-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
            background: radial-gradient(
                circle at center, 
                rgba(99, 102, 241, 0.1) 0%, 
                transparent 70%
            );
            animation: pulse 10s infinite alternate;
        }

        @keyframes pulse {
            0% { opacity: 0.3; }
            100% { opacity: 0.5; }
        }

        /* Navigation Bar */
        nav {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: rgba(10, 10, 26, 0.9);
            backdrop-filter: blur(10px);
            z-index: 1000;
            display: flex;
            justify-content: center;
            padding: 15px 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .nav-links {
            display: flex;
            gap: 30px;
        }

        .nav-link {
            color: rgb(249, 18, 145);
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 500;
            padding: 5px 10px;
            position: relative;
            transition: all 0.3s ease;
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary-color);
            transition: width 0.3s ease;
        }

        .nav-link:hover {
            color: var(--primary-color);
        }

        .nav-link:hover::after {
            width: 100%;
        }

        /* Active Navigation Link */
        .nav-link.active {
            color: #00eaff;
            text-shadow: 0 0 10px #00eaff;
        }

        .nav-link.active::after {
            width: 100%;
            background: #00eaff;
            box-shadow: 0 0 10px #00eaff;
        }

        /* Sparkling Stars Background */
        .stars {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .star {
            position: absolute;
            background-color:rgb(249, 18, 145);
            border-radius: 50%;
            animation: twinkle var(--duration) infinite ease-in-out;
        }

        @keyframes twinkle {
            0%, 100% { opacity: 0.2; }
            50% { opacity: 1; }
        }

        /* Light Streaks */
        .light-streaks {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
            overflow: hidden;
            pointer-events: none;
        }

        .streak {
            position: absolute;
            width: 1px;
            height: 200px;
            background: linear-gradient(to bottom, 
                transparent, 
                rgba(99, 102, 241, 0.4), 
                transparent);
            animation: streakFall 8s linear infinite;
            filter: blur(1px);
        }

        @keyframes streakFall {
            0% { 
                transform: translateY(-200px) rotate(30deg) scale(0.8);
                opacity: 0;
            }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { 
                transform: translateY(100vh) rotate(30deg) scale(0.8);
                opacity: 0;
            }
        }

        /* Sections */
        section {
            min-height: 100vh;
            padding: 80px 5% 0;
            display: flex;
            align-items: center;
            box-sizing: border-box;
            position: relative;
            z-index: 1;
        }

        .container {
            position: relative;
            z-index: 1;
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }

        /* Home Section */
        #home {
            display: flex;
            align-items: center;
        }

        .home-container {
            display: flex;
            width: 100%;
            align-items: center;
        }

        /* Text Content */
        .text-content {
            flex: 1;
            padding-right: 50px;
        }

        .greeting {
            font-size: 1.8rem;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        .name {
            font-size: 3.5rem;
            font-weight: bold;
            margin: 20px 0;
            color: white;
        }

        .description {
            font-size: 1.8rem;
            margin-top: 30px;
            min-height: 60px;
        }

        .static-text {
            margin-right: 10px;
        }

        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');

  #typewriter {
      font-size: 32px;
      font-weight: 700;
      font-family: "Poppins", sans-serif;
      background: linear-gradient(90deg, #ff416c, #ff4b2b);
      -webkit-background-clip: text;
      color: transparent;
      text-shadow: 0 0 15px rgba(255, 71, 87, 0.7);
      transition: all 0.3s ease-in-out;
  }

  .cursor {
      display: inline-block;
      width: 10px;
      height: 32px;
      background-color: #ff416c;
      animation: blink 0.7s infinite, moveCursor 0.3s ease-in-out;
      margin-left: 6px;
  }

  @keyframes blink {
      50% { opacity: 0; }
  }

  @keyframes moveCursor {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-3px); }
  }

        /* Social Icons */
        .social-icons {
            display: flex;
            gap: 25px;
            margin-top: 40px;
        }

        .social-icon {
            color: white;
            font-size: 2rem;
            transition: all 0.3s ease;
            position: relative;
        }

        .social-icon::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 0;
            height: 3px;
            background: var(--primary-color);
            transition: width 0.3s ease;
        }

        .social-icon:hover {
            transform: translateY(-5px);
        }

        .social-icon:hover::after {
            width: 100%;
        }

        .instagram:hover { color: #E1306C; }
        .linkedin:hover { color: #0077B5; }
        .github:hover { color: #6e5494; }

        /* Profile Section */
        .profile-section {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .profile-img-container {
            position: relative;
            width: 350px;
            height: 350px;
        }

        .profile-img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
            filter: grayscale(100%);
            transition: filter 1s ease, transform 0.5s ease;
            border: 5px solid rgba(249, 18, 145, 0.3);
            box-shadow: 0 0 30px rgba(249, 18, 145, 0.5);
        }

        .profile-img:hover {
            filter: grayscale(0%);
            transform: scale(1.05);
        }

        /* About Section */
        #about {
            flex-direction: column;
        }

        .about-container {
            width: 100%;
        }

        .about-profile-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 3rem 0;
            position: relative;
        }

        .about-image-container {
            width: 300px;
            height: 300px;
            border-radius: 50%;
            overflow: hidden;
            position: relative;
            margin-bottom: 2rem;
            box-shadow: 0 0 50px rgba(99, 102, 241, 0.5);
            transition: all 0.5s ease;
        }

        .about-image-container:hover {
            transform: scale(1.05);
            box-shadow: 0 0 70px rgba(99, 102, 241, 0.7);
        }

        .about-profile-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            opacity: 0;
            transform: scale(0.8);
            transition: all 1s ease;
        }

        .about-image-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, var(--accent-color), #3333ff);
            z-index: -1;
            border-radius: 50%;
            opacity: 0.7;
            animation: pulse 3s infinite;
        }

        .reveal-image .about-profile-image {
            opacity: 1;
            transform: scale(1);
        }

        /* About Content */
        .about-content {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 2rem;
            margin-top: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .about-content:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 40px rgba(99, 102, 241, 0.2);
        }

        .info-item {
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            position: relative;
            padding: 10px;
            border-radius: 10px;
            transition: background 0.3s ease;
        }

        .info-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .info-item span:first-child {
            font-weight: 600;
            color: var(--accent-color);
            width: 100px;
            display: inline-block;
        }

        /* Contact Form */
        .contact-form {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 2rem;
            margin-top: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .neon-input {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 12px 15px;
            border-radius: 8px;
            color: white;
            width: 100%;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .neon-input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 15px rgba(99, 102, 241, 0.5);
        }

        /* Buttons */
        .btn-neon {
            position: relative;
            display: inline-block;
            padding: 12px 30px;
            margin: 2rem 0;
            color: #fff;
            text-decoration: none;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-size: 1rem;
            overflow: hidden;
            transition: 0.5s;
            background: transparent;
            border: none;
            cursor: pointer;
        }

        .btn-neon:hover {
            background: var(--accent-color);
            box-shadow: 0 0 20px var(--accent-color);
        }

        /* Skills Section */
        #skills {
            flex-direction: column;
        }

        .skills-header {
            text-align: center;
            padding: 2rem 0;
            width: 100%;
            position: relative;
            z-index: 2;
        }

        .skills-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 2rem;
            padding: 2rem;
            max-width: 1000px;
            width: 90%;
            margin: 0 auto;
            position: relative;
            z-index: 2;
        }

        .skill-card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            z-index: 1;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(249, 18, 145, 0.1);
        }

        .skill-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, var(--primary-color), #8a2be2);
            z-index: -1;
            transform: scale(0);
            transition: transform 0.3s ease;
            opacity: 0;
            border-radius: 10px;
        }

        .skill-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(249, 18, 145, 0.3);
            border-color: rgba(249, 18, 145, 0.3);
        }

        .skill-card:hover::before {
            transform: scale(1);
            opacity: 1;
        }

        .skill-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .skill-card:hover .skill-icon {
            transform: scale(1.2);
            color: white;
        }

        .skill-name {
            font-weight: bold;
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }

        .skill-card:hover .skill-name {
            color: white;
        }

        .skill-level {
            height: 5px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            overflow: hidden;
            margin-top: 1rem;
        }

        .level-bar {
            height: 100%;
            background: var(--primary-color);
            width: 0;
            transition: width 1s ease;
        }

        .skill-card:hover .level-bar {
            background: white;
        }

        /* Section Titles */
        .section-title {
            font-size: 2.5rem;
            color: var(--primary-color);
            margin-bottom: 30px;
            text-align: center;
        }

        /* Footer */
        footer {
            margin-top: auto;
            padding: 1.5rem;
            text-align: center;
            width: 100%;
            opacity: 0.7;
            position: relative;
            z-index: 2;
        }

        /* Other Sections */
        #education, #achievements, #projects {
            flex-direction: column;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .nav-links {
                gap: 15px;
            }
            
            .home-container {
                flex-direction: column;
                text-align: center;
            }
            
            .text-content {
                padding-right: 0;
                order: 2;
                margin-top: 30px;
            }
            
            .profile-section {
                order: 1;
            }
            
            .profile-img-container, .about-image-container {
                width: 250px;
                height: 250px;
            }
            
            .name {
                font-size: 2.5rem;
            }
            
            .description {
                font-size: 1.4rem;
            }
            
            .social-icons {
                justify-content: center;
                margin-top: 30px;
                gap: 20px;
            }

            .skills-container {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
                gap: 1.5rem;
            }

            .info-item {
                flex-direction: column;
                align-items: flex-start;
            }

            .info-item span:first-child {
                margin-bottom: 5px;
                width: auto;
            }
        }

       
        /* Back to Top Button */
        .back-to-top {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 50px;
            height: 50px;
            background: rgba(255, 0, 153, 0.8);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 0 0 20px rgba(255, 0, 153, 0.5);
        }

        .back-to-top.visible {
            opacity: 1;
            visibility: visible;
        }

        .back-to-top:hover {
            background: rgba(255, 0, 153, 1);
            transform: translateY(-5px);
            box-shadow: 0 0 30px rgba(255, 0, 153, 0.8);
        }

        .back-to-top i {
            color: white;
            font-size: 1.5rem;
            transition: transform 0.3s ease;
        }

        .back-to-top:hover i {
            transform: translateY(-3px);
        }
    </style>
</head>
<body>
    <!-- Add Back to Top Button -->
    <div class="back-to-top">
        <i class="fas fa-arrow-up"></i>
    </div>

    <!-- Background Elements -->
    <div class="background-overlay"></div>
    <div class="stars" id="stars"></div>
    <div class="light-streaks" id="lightStreaks"></div>

    <!-- Navigation Bar -->
    <nav>
        <div class="nav-links">
            <a href="#home" class="nav-link">Home</a>
            <a href="#about" class="nav-link">About</a>
            <a href="#education" class="nav-link">Education</a>
            <a href="#skills" class="nav-link">Skills</a>
            <a href="#experience" class="nav-link">experience</a>
            <a href="#achievements" class="nav-link">Achievements</a>
            <a href="#projects" class="nav-link">Projects</a>
        </div>
    </nav>

    <!-- Home Section -->
    <section id="home">
        <div class="container">
            <div class="home-container">
                <!-- Text Content -->
                <div class="text-content">
                    <div class="greeting">HEY! I AM</div>
                    <div class="name">Abdul Kamil</div>
                    <div class="description">
                        <span class="static-text">I like</span>
                        <span id="typewriter"></span><span class="cursor"></span>
                    </div>
                    
                    <!-- Social Icons -->
                    <div class="social-icons">
                        <a href="https://www.instagram.com/direct/t/17847598307578869/?hl=en" class="social-icon instagram">
                            <i class="fab fa-instagram"></i>
                        </a>
                        <a href="https://www.linkedin.com/feed/?trk=guest_homepage-basic_nav-header-signin" class="social-icon linkedin">
                            <i class="fab fa-linkedin"></i>
                        </a>
                        <a href="https://github.com/abdulshhhh" class="social-icon github">
                            <i class="fab fa-github"></i>
                        </a>
                    </div>
                </div>

                <!-- Profile Picture -->
                <div class="profile-section">
                    <div class="profile-img-container">
                        <img src="mypic.jpg" alt="Abdul Kamil" class="profile-img" id="profileImg">
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- About Section -->
    <section id="about">
        <div class="container">
            <h2 class="section-title">About Me</h2>
            
            <div class="about-profile-section">
                <div class="about-image-container">
                    <img src="pro.jpg" alt="Abdul Kamil" class="about-profile-image">
                </div>
                <p>Here's a little about me</p>
            </div>
            
            <div class="about-content">
                <div class="info-item">
                    <span>Name:</span>
                    <span>Abdul Kamil</span>
                </div>
                <div class="info-item">
                    <span>Email:</span>
                    <span>abdulkamil2580@gmail.com</span>
                </div>
                <div class="info-item">
                    <span>Phone:</span>
                    <span>+91 8190814606</span>
                </div>
                <div class="info-item">
                    <span>Country:</span>
                    <span>India</span>
                </div>
                <div class="info-item">
                    <span>City:</span>
                    <span>Chennai</span>
                </div>

                <button class="btn-neon">
                    DOWNLOAD RESUME
                </button>
            </div>

            <div class="contact-form">
                <h2 class="section-title">Contact Me</h2>
                <form>
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" id="name" class="neon-input" placeholder="Your Name">
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="email" class="neon-input" placeholder="Your Email">
                    </div>
                    <div class="form-group">
                        <label for="message">Message</label>
                        <textarea id="message" class="neon-input" rows="5" placeholder="Your Message"></textarea>
                    </div>
                    <button class="btn-neon" type="submit">
                        SEND MESSAGE
                    </button>
                </form>
            </div>
        </div>
    </section>

    <!-- Education Section -->
    <section id="education">
        <div id="particles-js"></div>
        <div class="container">
            <h2 class="section-title">Education</h2>
            <div class="education-item">
                <h3>St. Joseph's College of Engineering</h3>
                <p>B.Tech in Information Technology | CGPA: 8.1</p>
                <p>OMR Road, Sholinganallur, Chennai</p>
                <span class="year">2nd Year</span>
            </div>
            <div class="education-item">
                <h3>Santhome Higher Secondary School</h3>
                <p>Completed Schooling | Score: 80% in HSLC</p>
                <span class="year">Year of Passing: 2023</span>
            </div>
        </div>
    </section>
    

    <!-- Skills Section -->
    <section id="skills">
        <div class="container">
            <div class="skills-header">
                <h1 class="section-title">Skills</h1>
            </div>

            <div class="skills-container">
                <!-- Web Technologies -->
                <div class="skill-card">
                    <i class="fab fa-html5 skill-icon" style="color: #E34F26;"></i>
                    <div class="skill-name">HTML5</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 95%;"></div>
                    </div>
                </div>

                <div class="skill-card">
                    <i class="fab fa-css3-alt skill-icon" style="color: #1572B6;"></i>
                    <div class="skill-name">CSS3</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 90%;"></div>
                    </div>
                </div>

                <div class="skill-card">
                    <i class="fab fa-js skill-icon" style="color: #F7DF1E;"></i>
                    <div class="skill-name">JavaScript</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 90%;"></div>
                    </div>
                </div>

                <!-- Backend Technologies -->
                <div class="skill-card">
                    <i class="fab fa-node skill-icon" style="color: #68A063;"></i>
                    <div class="skill-name">Express.js</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 85%;"></div>
                    </div>
                </div>

                <div class="skill-card">
                    <i class="fab fa-node skill-icon" style="color: #339933;"></i>
                    <div class="skill-name">Node.js</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 85%;"></div>
                    </div>
                </div>

                <!-- Databases -->
                <div class="skill-card">
                    <i class="fas fa-database skill-icon" style="color: #47A248;"></i>
                    <div class="skill-name">MongoDB</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 80%;"></div>
                    </div>
                </div>

                <div class="skill-card">
                    <i class="fas fa-fire skill-icon" style="color: #FFCA28;"></i>
                    <div class="skill-name">Firebase</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 75%;"></div>
                    </div>
                </div>

                <!-- Tools -->
                <div class="skill-card">
                    <i class="fab fa-github skill-icon" style="color: #181717;"></i>
                    <div class="skill-name">GitHub</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 90%;"></div>
                    </div>
                </div>

                <div class="skill-card">
                    <i class="fab fa-figma skill-icon" style="color: #F24E1E;"></i>
                    <div class="skill-name">Figma</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 70%;"></div>
                    </div>
                </div>

                <!-- Programming Languages -->
                <div class="skill-card">
                    <i class="fab fa-java skill-icon" style="color: #007396;"></i>
                    <div class="skill-name">Java</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 85%;"></div>
                    </div>
                </div>

                <!-- Cloud -->
                <div class="skill-card">
                    <i class="fab fa-aws skill-icon" style="color: #FF9900;"></i>
                    <div class="skill-name">AWS</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 70%;"></div>
                    </div>
                </div>

                <div class="skill-card">
                    <i class="fab fa-python skill-icon" style="color: #3776AB;"></i>
                    <div class="skill-name">Python</div>
                    <div class="skill-level">
                        <div class="level-bar" style="width: 80%;"></div>
                    </div>
                </div>
              </div>
        </div>
    </section>

    <section id="experience" class="neon-bg">
        <div class="container">
          <h2 class="section-title">Experience<span class="neon-dot">.</span></h2>
          
          <div class="particles-container">
            <div id="particles-js"></div>
            
            <div class="experience-cards">
              <div class="experience-card" data-aos="fade-up">
                <div class="card-icon">🎨</div>
                <h3>UI/UX Design Intern</h3>
                <h4>Retech Logistics</h4>
                <p>Mastered Figma and enhanced UI/UX design skills, focusing on user-centered design principles.</p>
                <div class="tech-stack">
                  <span>Figma</span>
                  <span>Prototyping</span>
                  <span>Wireframing</span>
                  <span>UX Research</span>
                </div>
              </div>
              
              <div class="experience-card" data-aos="fade-up" data-aos-delay="100">
                <div class="card-icon">💻</div>
                <h3>Admin Block Portal Developer</h3>
                <p>Developed the frontend for the Admin Block Portal at my college, ensuring a responsive, modern, and interactive UI.</p>
                <div class="tech-stack">
                  <span>HTML</span>
                  <span>CSS</span>
                  <span>JavaScript</span>
                  <span>Bootstrap</span>
                </div>
              </div>
              
              <div class="experience-card" data-aos="fade-up" data-aos-delay="200">
                <div class="card-icon">🌩</div>
                <h3>Google Cloud Arcade Facilitator</h3>
                <p>Led cloud computing workshops and helped students gain hands-on experience in Google Cloud.</p>
                <div class="tech-stack">
                  <span>Google Cloud</span>
                  <span>Kubernetes</span>
                  <span>Compute Engine</span>
                  <span>Cloud Functions</span>
                </div>
              </div>
              
              <div class="experience-card" data-aos="fade-up" data-aos-delay="300">
                <div class="card-icon">🎤</div>
                <h3>GDG On-Campus Event Host</h3>
                <p>Organized and hosted Google Developer Group (GDG) events at my college, connecting students with industry experts.</p>
              </div>
              
              <div class="experience-card" data-aos="fade-up" data-aos-delay="400">
                <div class="card-icon">📡</div>
                <h3>Smart Attendance System Developer</h3>
                <p>Developed a Smart Attendance System using geofencing & face recognition, winning 2nd place at Innothon '24.</p>
                <div class="tech-stack">
                  <span>Geofencing</span>
                  <span>AWS</span>
                  <span>Firebase</span>
                  <span>Face Recognition</span>
                </div>
                <div class="achievement">
                  <span>🏆 2nd Place - Innothon '24</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

    

    <!-- Projects Section -->
    <section id="projects">
        <div class="container">
            <h2 class="section-title">Projects</h2>
            <div class="project-grid">
                
                <!-- Smart Attendance System -->
                <div class="project-card">
                    <img src="sjce.png" alt="Smart Attendance System" class="project-image">
                    <div class="project-info">
                        <h3>Smart Attendance System</h3>
                        <p>A geofencing-based attendance system integrating <b>Face Recognition, Firebase, AWS Cloud</b>, and real-time monitoring.</p>
                        <div class="tech-stack">
                            <span>🔹 HTML</span>
                            <span>🔹 CSS</span>
                            <span>🔹 JavaScript</span>
                            <span>🔹 Node.js</span>
                            <span>🔹 AWS</span>
                            <span>🔹 Firebase</span>
                            <span>🔹 Firebase</span>
                            <span>🔹 Docker</span>
                            <span>🔹 CI/CD</span>
                        </div>
                        <a href="https://github.com/yourrepo/attendance-system" class="btn">View Project</a>
                    </div>
                </div>
    
                <!-- Project 2: Fitness App -->
                <div class="project-card">
                    <img src="fitness.jpg" alt="Fitness Tracker App" class="project-image">
                    <div class="project-info">
                        <h3>AI-Powered Fitness Tracker</h3>
                        <p>A smart fitness application with an AI-based **BMI calculator, real-time trainer recommendations**, and a **social media integration**.</p>
                        <div class="tech-stack">
                            <span>🔹 React.js</span>
                            <span>🔹 Tailwind CSS</span>
                            <span>🔹 Node.js</span>
                            <span>🔹 MongoDB</span>
                            <span>🔹 TensorFlow.js</span>
                        </div>
                        <a href="https://github.com/yourrepo/fitness-tracker" class="btn">View Project</a>
                    </div>
                </div>
    
                <!-- Project 3: Secure Messaging System -->
                <div class="project-card">
                    <img src="libary.jpg" alt="Library Management System" class="project-image">
                    <div class="project-info">
                        <h3>Library Management System</h3>
                        <p>A smart library management solution with **real-time book tracking, automated check-ins/outs,** and **analytics dashboard**.</p>
                        <div class="tech-stack">
                            <span>🔹 HTML</span>
                            <span>🔹 CSS</span>
                            <span>🔹 JavaScript</span>
                            <span>🔹 Node.js</span>
                            <span>🔹 MongoDB</span>
                        </div>
                        <a href="https://github.com/yourrepo/library-management" class="btn">View Project</a>
                    </div>
                </div>
                
            </div>
        </div>
    </section>
    
    <footer>
        &copy; <span id="year"></span> Abdul Kamil | Portfolio
    </footer>

    <script>
        // Create sparkling stars
        const starsContainer = document.getElementById('stars');
        const starCount = 100;

        for (let i = 0; i < starCount; i++) {
            const star = document.createElement('div');
            star.classList.add('star');
            
            // Random properties
            const size = Math.random() * 3;
            star.style.width = `${size}px`;
            star.style.height = `${size}px`;
            star.style.left = `${Math.random() * 100}vw`;
            star.style.top = `${Math.random() * 100}vh`;
            star.style.setProperty('--duration', `${2 + Math.random() * 3}s`);
            star.style.animationDelay = `${Math.random() * 5}s`;
            
            starsContainer.appendChild(star);
        }

        // Create light streaks
        const streaksContainer = document.getElementById('lightStreaks');
        const streakCount = 20;

        for (let i = 0; i < streakCount; i++) {
            const streak = document.createElement('div');
            streak.classList.add('streak');
            
            // Random properties for each streak
            streak.style.left = `${Math.random() * 100}%`;
            streak.style.animationDuration = `${5 + Math.random() * 10}s`;
            streak.style.animationDelay = `${Math.random() * 5}s`;
            streak.style.opacity = `${0.2 + Math.random() * 0.8}`;
            
            // Random length variation
            const length = 150 + Math.random() * 200;
            streak.style.height = `${length}px`;
            
            streaksContainer.appendChild(streak);
        }

        const phrases = [
            "Crafting Stunning Websites 🚀",
            "Building Scalable Web Apps 💡",
            "Designing Beautiful UIs 🎨",
            "Bringing Ideas to Life 🔥"
        ];
        
        const typewriterElement = document.getElementById('typewriter');
        let phraseIndex = 0;
        let charIndex = 0;
        let isDeleting = false;
        let typingSpeed = 100;
        
        function typeWriter() {
            const currentPhrase = phrases[phraseIndex % phrases.length];

            if (isDeleting) {
                typewriterElement.textContent = currentPhrase.substring(0, charIndex - 1);
                charIndex--;
                typingSpeed = 50; 
            } else {
                typewriterElement.textContent = currentPhrase.substring(0, charIndex + 1);
                charIndex++;
                typingSpeed = Math.random() * (120 - 80) + 80; // Natural typing effect
            }

            if (!isDeleting && charIndex === currentPhrase.length) {
                isDeleting = true;
                typingSpeed = 1500; // Pause before deleting
            } else if (isDeleting && charIndex === 0) {
                isDeleting = false;
                phraseIndex++;
                typingSpeed = 600; // Pause before typing next phrase
            }

            setTimeout(typeWriter, typingSpeed);
        }

        setTimeout(typeWriter, 1000);

        // Grayscale to color effect
        const profileImg = document.getElementById('profileImg');
        const container = profileImg.parentElement;

        // Add pulsating ring on hover
        profileImg.addEventListener('mouseenter', () => {
            profileImg.style.filter = 'grayscale(0%)';
            profileImg.style.transform = 'scale(1.2) rotate(-5deg)';
            profileImg.style.boxShadow = '0 10px 50px rgba(249, 18, 145, 0.9)';
            profileImg.style.transition = 'all 0.5s ease';

            // Create glowing particle effect
            for (let i = 0; i < 20; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.top = `${Math.random() * 100}%`;
                container.appendChild(particle);

                // Animate particle
                setTimeout(() => container.removeChild(particle), 2000);
            }
        });

        profileImg.addEventListener('mouseleave', () => {
            profileImg.style.filter = 'grayscale(100%)';
            profileImg.style.transform = 'scale(1) rotate(0deg)';
            profileImg.style.boxShadow = 'none';
            profileImg.style.transition = 'all 0.5s ease';
        });

        // Style particles
        const style = document.createElement('style');
        style.textContent = `
            .particle {
                position: absolute;
                width: 10px;
                height: 10px;
                background: radial-gradient(circle, rgba(249, 18, 145, 0.8), transparent);
                border-radius: 50%;
                animation: float 2s ease-in-out;
                pointer-events: none;
            }

            @keyframes float {
                0% { transform: scale(1) translateY(0); opacity: 1; }
                100% { transform: scale(0) translateY(-20px); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                    window.scrollTo({
                        top: targetElement.offsetTop - 70, // Adjust for fixed header
                        behavior: 'smooth'
                    });
                }
            });
        });

        // Image Reveal and Floating Animation
        document.addEventListener('DOMContentLoaded', () => {
            // Trigger image reveal after page loads
            setTimeout(() => {
                document.querySelector('.about-image-container').classList.add('reveal-image');
            }, 500);

            // GSAP floating animation
            gsap.to('.about-image-container', {
                y: 15,
                duration: 3,
                repeat: -1,
                yoyo: true,
                ease: "sine.inOut"
            });

            // Subtle animation for sections
            gsap.from('.about-content, .contact-form', {
                duration: 1,
                y: 50,
                opacity: 0,
                stagger: 0.2,
                ease: 'power3.out'
            });

            // Animate skill bars on page load
            const levelBars = document.querySelectorAll('.level-bar');
            levelBars.forEach(bar => {
                // Reset width to 0 first
                bar.style.width = '0';
                // Trigger reflow
                void bar.offsetWidth;
                // Animate to actual width
                const width = bar.style.width;
                bar.style.width = '0';
                setTimeout(() => {
                    bar.style.width = width;
                }, 100);
            });

            // Set current year in footer
            document.getElementById('year').textContent = new Date().getFullYear();
        });

        // Input Focus Effects
        const inputs = document.querySelectorAll('.neon-input');
        inputs.forEach(input => {
            input.addEventListener('focus', () => {
                input.parentElement.querySelector('label').style.textShadow = '0 0 10px var(--accent-color)';
            });
            input.addEventListener('blur', () => {
                input.parentElement.querySelector('label').style.textShadow = 'none';
            });
        });

        // Initialize particles.js with enhanced configuration
        particlesJS("particles-js", {
            "particles": {
                "number": {
                    "value": 100,
                    "density": {
                        "enable": true,
                        "value_area": 800
                    }
                },
                "color": {
                    "value": ["#ff0099", "#00eaff", "#ff416c", "#ff4b2b"]
                },
                "shape": {
                    "type": "circle",
                    "stroke": {
                        "width": 0,
                        "color": "#000000"
                    }
                },
                "opacity": {
                    "value": 0.5,
                    "random": true,
                    "anim": {
                        "enable": true,
                        "speed": 1,
                        "opacity_min": 0.1,
                        "sync": false
                    }
                },
                "size": {
                    "value": 3,
                    "random": true,
                    "anim": {
                        "enable": true,
                        "speed": 2,
                        "size_min": 0.1,
                        "sync": false
                    }
                },
                "line_linked": {
                    "enable": true,
                    "distance": 150,
                    "color": "#ff0099",
                    "distance": 150,
                    "color": "#ff0099",
                    "opacity": 0.4,
                    "width": 1
                },
                "move": {
                    "speed": 2
                }
            },
            "interactivity": {
                "events": {
                    "onhover": { "enable": true, "mode": "repulse" }
                }
            }
        });

        // Back to Top Button Functionality
        const backToTop = document.querySelector('.back-to-top');
        
        window.addEventListener('scroll', () => {
            if (window.scrollY > 300) {
                backToTop.classList.add('visible');
            } else {
                backToTop.classList.remove('visible');
            }
        });

        backToTop.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        // Active Navigation Link
        const sections = document.querySelectorAll('section');
        const navLinks = document.querySelectorAll('.nav-link');

        window.addEventListener('scroll', () => {
            let current = '';
            
            sections.forEach(section => {
                const sectionTop = section.offsetTop;
                const sectionHeight = section.clientHeight;
                if (window.scrollY >= (sectionTop - sectionHeight/3)) {
                    current = section.getAttribute('id');
                }
            });

            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href').slice(1) === current) {
                    link.classList.add('active');
                }
            });
        });
        // Particles.js Configuration
// Enhanced Particles.js Configuration
document.addEventListener('DOMContentLoaded', function() {
  // Load particles.js with enhanced configuration
  particlesJS('particles-js', {
    "particles": {
      "number": {
        "value": 100,
        "density": {
          "enable": true,
          "value_area": 800
        }
      },
      "color": {
        "value": ["#3333ff", "#00ccff", "#ff00cc", "#0ff"]
      },
      "shape": {
        "type": ["circle", "triangle"],
        "stroke": {
          "width": 0,
          "color": "#000000"
        },
        "polygon": {
          "nb_sides": 5
        }
      },
      "opacity": {
        "value": 0.6,
        "random": true,
        "anim": {
          "enable": true,
          "speed": 1,
          "opacity_min": 0.1,
          "sync": false
        }
      },
      "size": {
        "value": 4,
        "random": true,
        "anim": {
          "enable": true,
          "speed": 2,
          "size_min": 0.1,
          "sync": false
        }
      },
      "line_linked": {
        "enable": true,
        "distance": 150,
        "color": "#00ffff",
        "opacity": 0.3,
        "width": 1
      },
      "move": {
        "enable": true,
        "speed": 1.5,
        "direction": "none",
        "random": true,
        "straight": false,
        "out_mode": "out",
        "bounce": false,
        "attract": {
          "enable": true,
          "rotateX": 600,
          "rotateY": 1200
        }
      }
    },
    "interactivity": {
      "detect_on": "canvas",
      "events": {
        "onhover": {
          "enable": true,
          "mode": "grab"
        },
        "onclick": {
          "enable": true,
          "mode": "push"
        },
        "resize": true
      },
      "modes": {
        "grab": {
          "distance": 180,
          "line_linked": {
            "opacity": 0.8,
            "color": "#ff00cc"
          }
        },
        "bubble": {
          "distance": 400,
          "size": 40,
          "duration": 2,
          "opacity": 8,
          "speed": 3
        },
        "repulse": {
          "distance": 200,
          "duration": 0.4
        },
        "push": {
          "particles_nb": 5
        },
        "remove": {
          "particles_nb": 2
        }
      }
    },
    "retina_detect": true
  });
  
  // Optional: Add scroll animation with AOS library
  if (typeof AOS !== 'undefined') {
    AOS.init({
      duration: 800,
      easing: 'ease-out-cubic',
      once: false,
      mirror: true
    });
  }
  
  // Enhanced Neon text flicker effect
  const neonElements = document.querySelectorAll('.neon-dot');
  setInterval(() => {
    neonElements.forEach(element => {
      if (Math.random() > 0.95) {
        element.style.opacity = 0.5;
        element.style.textShadow = '0 0 5px #0ff, 0 0 10px #0ff';
        setTimeout(() => {
          element.style.opacity = 1;
          element.style.textShadow = '0 0 10px #0ff, 0 0 20px #0ff, 0 0 30px #0ff';
        }, 50);
      }
    });
  }, 300);
  
  // Add dynamic 3D tilt effect to cards
  const cards = document.querySelectorAll('.experience-card');
  
  // Add random subtle animations to cards
  cards.forEach((card, index) => {
    // Add subtle random floating animation
    if (index % 2 === 0) {
      card.style.animation = `float ${4 + Math.random() * 2}s ease-in-out infinite, 
                             glow ${6 + Math.random() * 4}s ease-in-out infinite`;
    } else {
      card.style.animation = `float ${5 + Math.random() * 2}s ease-in-out infinite, 
                             glow ${7 + Math.random() * 4}s ease-in-out infinite`;
    }
    
    // Enhanced interactive hover effect with 3D tilt
    card.addEventListener('mousemove', (e) => {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      
      // Calculate rotation values based on mouse position
      const rotateY = ((x - centerX) / centerX) * 10; // Max 10 degrees
      const rotateX = ((centerY - y) / centerY) * 10; // Max 10 degrees
      
      // Apply the 3D transform
      card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.03, 1.03, 1.03)`;
      
      // Create dynamic shadow based on mouse position
      const shadowX = (x - centerX) / 15;
      const shadowY = (y - centerY) / 15;
      
      card.style.boxShadow = `
        ${shadowX}px ${shadowY}px 30px rgba(0, 0, 0, 0.3),
        0 0 20px rgba(28, 175, 252, 0.3),
        0 0 30px rgba(249, 42, 159, 0.2)
      `;
      
      // Create "magnetic" effect for the icon
      const icon = card.querySelector('.card-icon');
      if (icon) {
        const maxShift = 10;
        const shiftX = ((x - centerX) / centerX) * maxShift;
        const shiftY = ((y - centerY) / centerY) * maxShift;
        
        icon.style.transform = `translate3d(${shiftX}px, ${shiftY}px, 20px) scale(1.1)`;
      }
      
      // Add glow effect that follows cursor
      card.style.background = `
        radial-gradient(circle at ${x}px ${y}px, 
        rgba(15, 15, 35, 0.85) 0%, 
        rgba(12, 12, 35, 0.7) 50%,
        rgba(10, 10, 30, 0.7) 100%)`;
    });
    
    // Reset styles on mouse leave
    card.addEventListener('mouseleave', () => {
      card.style.transform = '';
      card.style.background = 'rgba(12, 12, 35, 0.7)';
      
      // Reset the box shadow
      // But keep the animation if it was assigned
      if (index % 2 === 0) {
        card.style.animation = `float ${4 + Math.random() * 2}s ease-in-out infinite, 
                               glow ${6 + Math.random() * 4}s ease-in-out infinite`;
      } else {
        card.style.animation = `float ${5 + Math.random() * 2}s ease-in-out infinite, 
                               glow ${7 + Math.random() * 4}s ease-in-out infinite`;
      }
      
      // Reset icon position
      const icon = card.querySelector('.card-icon');
      if (icon) {
        icon.style.transform = '';
      }
    });
    
    // Add particle burst on click
    card.addEventListener('click', (e) => {
      createParticleBurst(e.clientX, e.clientY);
    });
  });
  
  // Create particle burst effect on click
  function createParticleBurst(x, y) {
    const colors = ['#3333ff', '#00ccff', '#ff00cc', '#0ff'];
    const burstCount = 20;
    
    for (let i = 0; i < burstCount; i++) {
      const particle = document.createElement('div');
      particle.className = 'particle';
      document.body.appendChild(particle);
      
      // Random particle color
      const color = colors[Math.floor(Math.random() * colors.length)];
      
      // Set particle position and style
      particle.style.left = `${x}px`;
      particle.style.top = `${y}px`;
      particle.style.backgroundColor = color;
      particle.style.boxShadow = `0 0 10px ${color}, 0 0 5px ${color}`;
      
      // Random size
      const size = Math.random() * 8 + 2;
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      
      // Random direction
      const angle = Math.random() * 360 * Math.PI / 180;
      const velocity = Math.random() * 100 + 50;
      const vx = Math.cos(angle) * velocity;
      const vy = Math.sin(angle) * velocity;
      
      // Animate particle
      gsap.to(particle, {
        x: vx,
        y: vy,
        opacity: 0,
        scale: 0,
        duration: Math.random() * 1 + 0.5,
        ease: "power2.out",
        onComplete: function() {
          particle.remove();
        }
      });
    }
  }
  
  // Add CSS for particles to head
  const style = document.createElement('style');
  style.textContent = `
    .particle {
      position: fixed;
      border-radius: 50%;
      pointer-events: none;
      z-index: 9999;
    }
  `;
  document.head.appendChild(style);
  
  // Function to create random star-like elements in background
  function createStars() {
    const stars = 20;
    const container = document.querySelector('.neon-bg');
    
    for (let i = 0; i < stars; i++) {
      const star = document.createElement('div');
      star.className = 'star';
      container.appendChild(star);
      
      // Random position
      star.style.left = `${Math.random() * 100}%`;
      star.style.top = `${Math.random() * 100}%`;
      
      // Random size
      const size = Math.random() * 3 + 1;
      star.style.width = `${size}px`;
      star.style.height = `${size}px`;
      
      // Random animation duration
      const duration = Math.random() * 3 + 2;
      star.style.animation = `twinkle ${duration}s infinite ease-in-out ${Math.random() * 5}s`;
    }
  }
  
  // Add CSS for stars to head
  const starStyle = document.createElement('style');
  starStyle.textContent = `
    .star {
      position: absolute;
      background-color: #fff;
      border-radius: 50%;
      opacity: 0.6;
      z-index: 0;
      pointer-events: none;
    }
    
    @keyframes twinkle {
      0%, 100% { opacity: 0.2; transform: scale(0.8); }
      50% { opacity: 0.8; transform: scale(1.2); filter: blur(1px); }
    }
  `;
  document.head.appendChild(starStyle);
  
  // Call the function to create stars
  createStars();

  // If GSAP library is not loaded, load a fallback for particle burst
  if (typeof gsap === 'undefined') {
    // Add fallback animation using regular CSS animations
    const fallbackStyle = document.createElement('style');
    fallbackStyle.textContent = `
      @keyframes burstAnimation {
        to {
          transform: translate(var(--tx), var(--ty)) scale(0);
          opacity: 0;
        }
      }
      
      .particle {
        animation: burstAnimation 1s forwards ease-out;
      }
    `;
    document.head.appendChild(fallbackStyle);
    
    // Override createParticleBurst function with CSS animation fallback
    createParticleBurst = function(x, y) {
      const colors = ['#3333ff', '#00ccff', '#ff00cc', '#0ff'];
      const burstCount = 15;
      
      for (let i = 0; i < burstCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        document.body.appendChild(particle);
        
        // Random particle color
        const color = colors[Math.floor(Math.random() * colors.length)];
        
        // Set particle position and style
        particle.style.left = `${x}px`;
        particle.style.top = `${y}px`;
        particle.style.backgroundColor = color;
        particle.style.boxShadow = `0 0 10px ${color}, 0 0 5px ${color}`;
        
        // Random size
        const size = Math.random() * 8 + 2;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        
        // Random direction
        const angle = Math.random() * 360 * Math.PI / 180;
        const distance = Math.random() * 100 + 50;
        const tx = Math.cos(angle) * distance;
        const ty = Math.sin(angle) * distance;
        
        // Set CSS variables for the animation
        particle.style.setProperty('--tx', `${tx}px`);
        particle.style.setProperty('--ty', `${ty}px`);
        
        // Remove particle after animation completes
        setTimeout(() => {
          particle.remove();
        }, 1000);
      }
    };
  }
});
document.addEventListener('DOMContentLoaded', function() {
  // Add cosmic background elements
  const experienceSection = document.getElementById('experience');
  
  // Add cosmic overlay
  const cosmicOverlay = document.createElement('div');
  cosmicOverlay.className = 'cosmic-overlay';
  experienceSection.prepend(cosmicOverlay);
  
  // Add nebula effects
  const nebula1 = document.createElement('div');
  nebula1.className = 'nebula nebula-1';
  experienceSection.prepend(nebula1);
  
  const nebula2 = document.createElement('div');
  nebula2.className = 'nebula nebula-2';
  experienceSection.prepend(nebula2);
  
  const nebula3 = document.createElement('div');
  nebula3.className = 'nebula nebula-3';
  experienceSection.prepend(nebula3);
  
  // Update section title with cosmic text effect
  const sectionTitle = document.querySelector('#experience .section-title');
  if (sectionTitle) {
    const titleText = sectionTitle.textContent;
    const dotSpan = document.querySelector('.neon-dot');
    const dotHTML = dotSpan ? dotSpan.outerHTML : '<span class="neon-dot">.</span>';
    sectionTitle.innerHTML = `<span class="title-text">${titleText.replace('.', '')}</span>${dotHTML}`;
  }
  // Enhanced particles.js with cosmic effect
  particlesJS('particles-js', {
    "particles": {
      "number": {
        "value": 120,
        "density": {
          "enable": true,
          "value_area": 800
        }
      },
      "color": {
        "value": ["#3333ff", "#00ccff", "#ff00cc", "#7700ff", "#00ffff"]
      },
      "shape": {
        "type": ["circle", "triangle", "star", "polygon"],
        "stroke": {
          "width": 0,
          "color": "#000000"
        },
        "polygon": {
          "nb_sides": 5
        },
        "image": {
          "src": "img/github.svg",
          "width": 100,
          "height": 100
        }
      },
      "opacity": {
        "value": 0.7,
        "random": true,
        "anim": {
          "enable": true,
          "speed": 1,
          "opacity_min": 0.1,
          "sync": false
        }
      },
      "size": {
        "value": 3,
        "random": true,
        "anim": {
          "enable": true,
          "speed": 2,
          "size_min": 0.1,
          "sync": false
        }
      },
      "line_linked": {
        "enable": true,
        "distance": 150,
        "color": "#ffffff",
        "opacity": 0.2,
        "width": 1
      },
      "move": {
        "enable": true,
        "speed": 2,
        "direction": "none",
        "random": true,
        "straight": false,
        "out_mode": "out",
        "bounce": false,
        "attract": {
          "enable": true,
          "rotateX": 600,
          "rotateY": 1200
        }
      }
    },
    "interactivity": {
      "detect_on": "canvas",
      "events": {
        "onhover": {
          "enable": true,
          "mode": "grab"
        },
        "onclick": {
          "enable": true,
          "mode": "push"
        },
        "resize": true
      },
      "modes": {
        "grab": {
          "distance": 140,
          "line_linked": {
            "opacity": 1
          }
        },
        "bubble": {
          "distance": 400,
          "size": 40,
          "duration": 2,
          "opacity": 8,
          "speed": 3
        },
        "repulse": {
          "distance": 200,
          "duration": 0.4
        },
        "push": {
          "particles_nb": 4
        },
        "remove": {
          "particles_nb": 2
        }
      }
    },
    "retina_detect": true
  });
  
  // Create stars
  createStars();
  
  // Add cosmic animation
  addCosmicAnimation();
});

// Function to create stars in the background
function createStars() {
  const experienceSection = document.getElementById('experience');
  const starContainer = document.createElement('div');
  starContainer.className = 'star-container';
  
  // Create stars with random positions and sizes
  for (let i = 0; i < 200; i++) {
    const star = document.createElement('div');
    star.className = 'star';
    star.style.top = `${Math.random() * 100}%`;
    star.style.left = `${Math.random() * 100}%`;
    star.style.width = `${Math.random() * 2 + 1}px`;
    star.style.height = star.style.width;
    star.style.animationDelay = `${Math.random() * 5}s`;
    starContainer.appendChild(star);
  }
  
  experienceSection.prepend(starContainer);
}

// Function to add cosmic animation effects
function addCosmicAnimation() {
  // Add parallax effect to nebulae
  document.addEventListener('mousemove', function(e) {
    const xPos = e.clientX / window.innerWidth;
    const yPos = e.clientY / window.innerHeight;
    
    document.querySelector('.nebula-1').style.transform = `translate(${xPos * 30}px, ${yPos * 30}px)`;
    document.querySelector('.nebula-2').style.transform = `translate(${xPos * -20}px, ${yPos * -20}px)`;
    document.querySelector('.nebula-3').style.transform = `translate(${xPos * 10}px, ${yPos * 10}px)`;
  });
  
  // Add shooting stars at random intervals
  setInterval(createShootingStar, 5000);
}

// Function to create a shooting star
function createShootingStar() {
  const experienceSection = document.getElementById('experience');
  const shootingStar = document.createElement('div');
  shootingStar.className = 'shooting-star';
  
  // Random position and angle
  const startTop = Math.random() * 50;
  const startLeft = Math.random() * 100;
  const angle = Math.random() * 45 + 15; // 15-60 degrees
  
  shootingStar.style.top = `${startTop}%`;
  shootingStar.style.left = `${startLeft}%`;
  shootingStar.style.transform = `rotate(${angle}deg)`;
  
  experienceSection.appendChild(shootingStar);
  
  // Remove shooting star after animation completes
  setTimeout(() => {
    shootingStar.remove();
  }, 1000);
}

// Add CSS for cosmic effects
const cosmicStyles = document.createElement('style');
cosmicStyles.textContent = `
  .cosmic-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(125deg, rgba(0,0,0,0.9) 0%, rgba(20,10,40,0.9) 50%, rgba(0,0,20,0.9) 100%);
    z-index: -2;
  }
  
  .nebula {
    position: absolute;
    border-radius: 50%;
    filter: blur(40px);
    opacity: 0.3;
    z-index: -1;
    transition: transform 0.5s ease-out;
  }
  
  .nebula-1 {
    width: 500px;
    height: 500px;
    background: radial-gradient(circle, rgba(120,0,255,0.6) 0%, rgba(50,0,100,0.2) 70%, rgba(0,0,0,0) 100%);
    top: -100px;
    left: -100px;
  }
  
  .nebula-2 {
    width: 600px;
    height: 600px;
    background: radial-gradient(circle, rgba(0,200,255,0.5) 0%, rgba(0,50,100,0.2) 60%, rgba(0,0,0,0) 100%);
    top: 30%;
    right: -200px;
  }
  
  .nebula-3 {
    width: 400px;
    height: 400px;
    background: radial-gradient(circle, rgba(255,0,150,0.4) 0%, rgba(100,0,50,0.2) 60%, rgba(0,0,0,0) 100%);
    bottom: -100px;
    left: 30%;
  }
  
  .title-text {
    color: #ffffff;
    text-shadow: 0 0 10px rgba(120, 200, 255, 0.8);
    font-weight: 700;
    letter-spacing: 1px;
  }
  
  .neon-dot {
    color: #00ccff;
    text-shadow: 0 0 10px #00ccff, 0 0 20px #00ccff, 0 0 30px #00ccff;
    font-size: 2em;
    position: relative;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
  }
  
  .star-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
  
  .star {
    position: absolute;
    background-color: #ffffff;
    border-radius: 50%;
    animation: twinkle 3s infinite alternate;
  }
  
  @keyframes twinkle {
    0% { opacity: 0.2; }
    100% { opacity: 1; }
  }
  
  .shooting-star {
    position: absolute;
    width: 100px;
    height: 2px;
    background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 50%, rgba(255,255,255,0) 100%);
    animation: shoot 1s linear forwards;
    z-index: 0;
  }
  
  @keyframes shoot {
    0% { transform: translateX(0) translateY(0) rotate(var(--angle)); opacity: 1; }
    100% { transform: translateX(200px) translateY(200px) rotate(var(--angle)); opacity: 0; }
  }
  
  #experience {
    position: relative;
    color: #ffffff;
    overflow: hidden;
  }
`;

document.head.appendChild(cosmicStyles);
document.addEventListener('DOMContentLoaded', function() {
  // Create achievements section if it doesn't exist
  let achievementsSection = document.getElementById('achievements');
  if (!achievementsSection) {
    achievementsSection = document.createElement('section');
    achievementsSection.id = 'achievements';
    document.body.appendChild(achievementsSection);
  }
  
  // Add cosmic overlay and effects
  const cosmicOverlay = document.createElement('div');
  cosmicOverlay.className = 'cosmic-overlay';
  achievementsSection.prepend(cosmicOverlay);
  
  // Add nebula effects
  const nebula1 = document.createElement('div');
  nebula1.className = 'nebula nebula-1';
  achievementsSection.prepend(nebula1);
  
  const nebula2 = document.createElement('div');
  nebula2.className = 'nebula nebula-2';
  achievementsSection.prepend(nebula2);
  
  const nebula3 = document.createElement('div');
  nebula3.className = 'nebula nebula-3';
  achievementsSection.prepend(nebula3);
  
  // Create particles container
  const particlesContainer = document.createElement('div');
  particlesContainer.id = 'achievements-particles';
  achievementsSection.prepend(particlesContainer);
  
  // Create section title with cosmic effect
  const sectionTitleContainer = document.createElement('div');
  sectionTitleContainer.className = 'section-title-container';
  
  const sectionTitle = document.createElement('h2');
  sectionTitle.className = 'section-title';
  sectionTitle.innerHTML = '<span class="title-text">Achievements</span><span class="neon-dot">.</span>';
  sectionTitleContainer.appendChild(sectionTitle);
  achievementsSection.appendChild(sectionTitleContainer);
  
  // Create achievements container
  const achievementsContainer = document.createElement('div');
  achievementsContainer.className = 'achievements-container';
  achievementsSection.appendChild(achievementsContainer);
  
  // Achievement data
  const achievements = [
    {
      title: "🚀 Hack A Cloud – 🏆 Champion",
      description: "Designed and deployed a highly scalable, secure multi-cloud solution that won 1st place in a high-stakes hackathon. Our system leveraged AWS, Azure, and GCP for optimal redundancy, performance, and cost efficiency, featuring real-time monitoring, automated cloud optimization, and intelligent resource scaling.",
      techStack: ["Multi-Cloud Architecture (AWS, Azure, GCP)", "AWS (EC2, S3, Lambda, CloudWatch, IAM)", "Azure Functions & Blob Storage", "Google Cloud Run & Firebase", "Node.js & Express.js (Backend)", "MongoDB (NoSQL Database)", "React.js & TailwindCSS (Frontend)", "CI/CD Pipelines (GitHub Actions, Docker, AWS CodePipeline)"],
      impact: "Achieved seamless multi-cloud orchestration, reducing downtime risks by 60%, enhancing cloud efficiency, and automating resource scaling across providers.",
      color: "#4F46E5"
    },
    {
      title: "🎯 Innothon '24 – 🥈 2nd Place",
      description: "Built a cutting-edge Smart Attendance System integrating geofencing, AI-powered face recognition, and real-time authentication. This innovation eliminated proxy attendance, ensuring 100% accuracy and security.",
      techStack: ["Geofencing (AWS Location Service, GPS, Wi-Fi/Bluetooth triangulation)", "AI-Powered Face Recognition (OpenCV, AWS Rekognition)", "Real-time Backend (Firebase, Node.js, Express.js)", "Frontend Magic (HTML, CSS, JavaScript, Bootstrap)"],
      impact: "Achieved seamless fraud-proof attendance tracking, merging biometric verification with geofencing-based authentication for institutions.",
      color: "#10B981"
    },
    {
      title: "👋 First-Year Orientation Host",
      description: "Led a successful orientation program for freshmen, introducing them to tech communities, coding resources, and industry pathways.",
      techStack: ["Community Building", "Technical Mentorship", "Resource Curation", "Event Management"],
      impact: "Helped new students navigate their tech journey and build connections within the university's tech ecosystem.",
      color: "#EC4899"
    }
  ];
  
  // Create achievement cards
  achievements.forEach((achievement, index) => {
    const achievementCard = document.createElement('div');
    achievementCard.className = 'achievement-card';
    achievementCard.setAttribute('data-index', index);
    achievementCard.style.setProperty('--card-color', achievement.color);
    
    const achievementContent = `
      <div class="achievement-header">
        <h3>${achievement.title}</h3>
      </div>
      <div class="achievement-body">
        <p class="description">${achievement.description}</p>
        <div class="tech-stack">
          <h4>⚡ Tech Arsenal:</h4>
          <ul>
            ${achievement.techStack.map(tech => `<li>🔹 ${tech}</li>`).join('')}
          </ul>
        </div>
        <div class="impact">
          <h4>💡 Impact:</h4>
          <p>${achievement.impact}</p>
        </div>
      </div>
      <div class="achievement-glow"></div>
    `;
    
    achievementCard.innerHTML = achievementContent;
    achievementsContainer.appendChild(achievementCard);
    
    // Add hover and click effects
    achievementCard.addEventListener('mouseenter', () => {
      achievementCard.classList.add('expanded');
    });
    
    achievementCard.addEventListener('mouseleave', () => {
      achievementCard.classList.remove('expanded');
    });
  });
  
  // Create stars
  createStars(achievementsSection);
  
  // Add cosmic animation
  addCosmicAnimation(achievementsSection);
  
  // Initialize particles
  initParticles();
  
  // Add custom cursor effect
  addCustomCursor(achievementsSection);
});

// Function to create stars in the background
function createStars(section) {
  const starContainer = document.createElement('div');
  starContainer.className = 'star-container';
  
  // Create stars with random positions and sizes
  for (let i = 0; i < 200; i++) {
    const star = document.createElement('div');
    star.className = 'star';
    star.style.top = `${Math.random() * 100}%`;
    star.style.left = `${Math.random() * 100}%`;
    star.style.width = `${Math.random() * 2 + 1}px`;
    star.style.height = star.style.width;
    star.style.animationDelay = `${Math.random() * 5}s`;
    starContainer.appendChild(star);
  }
  
  section.prepend(starContainer);
}

// Function to add cosmic animation effects
function addCosmicAnimation(section) {
  // Add parallax effect to nebulae
  document.addEventListener('mousemove', function(e) {
    const xPos = e.clientX / window.innerWidth;
    const yPos = e.clientY / window.innerHeight;
    
    const nebulas = section.querySelectorAll('.nebula');
    nebulas.forEach((nebula, index) => {
      const intensity = 30 - (index * 10);
      nebula.style.transform = `translate(${xPos * intensity}px, ${yPos * intensity}px)`;
    });
    
    // Add parallax to achievement cards
    const cards = section.querySelectorAll('.achievement-card');
    cards.forEach((card, index) => {
      const cardIndex = parseInt(card.getAttribute('data-index'));
      const xOffset = (xPos - 0.5) * 10 * (cardIndex + 1);
      const yOffset = (yPos - 0.5) * 5 * (cardIndex + 1);
      card.style.transform = `translate(${xOffset}px, ${yOffset}px)`;
    });
  });
  
  // Add shooting stars at random intervals
  setInterval(() => createShootingStar(section), 5000);
}

// Function to create a shooting star
function createShootingStar(section) {
  const shootingStar = document.createElement('div');
  shootingStar.className = 'shooting-star';
  
  // Random position and angle
  const startTop = Math.random() * 50;
  const startLeft = Math.random() * 100;
  const angle = Math.random() * 45 + 15; // 15-60 degrees
  
  shootingStar.style.top = `${startTop}%`;
  shootingStar.style.left = `${startLeft}%`;
  shootingStar.style.transform = `rotate(${angle}deg)`;
  
  section.appendChild(shootingStar);
  
  // Remove shooting star after animation completes
  setTimeout(() => {
    shootingStar.remove();
  }, 1000);
}

// Function to initialize particles
function initParticles() {
  particlesJS('achievements-particles', {
    "particles": {
      "number": {
        "value": 100,
        "density": {
          "enable": true,
          "value_area": 800
        }
      },
      "color": {
        "value": ["#ffffff", "#4F46E5", "#10B981", "#EC4899", "#6366F1"]
      },
      "shape": {
        "type": ["circle", "triangle", "star"],
        "stroke": {
          "width": 0,
          "color": "#000000"
        }
      },
      "opacity": {
        "value": 0.5,
        "random": true,
        "anim": {
          "enable": true,
          "speed": 1,
          "opacity_min": 0.1,
          "sync": false
        }
      },
      "size": {
        "value": 3,
        "random": true,
        "anim": {
          "enable": true,
          "speed": 2,
          "size_min": 0.1,
          "sync": false
        }
      },
      "line_linked": {
        "enable": true,
        "distance": 150,
        "color": "#ffffff",
        "opacity": 0.2,
        "width": 1
      },
      "move": {
        "enable": true,
        "speed": 1.5,
        "direction": "none",
        "random": true,
        "straight": false,
        "out_mode": "out",
        "bounce": false,
        "attract": {
          "enable": true,
          "rotateX": 600,
          "rotateY": 1200
        }
      }
    },
    "interactivity": {
      "detect_on": "canvas",
      "events": {
        "onhover": {
          "enable": true,
          "mode": "grab"
        },
        "onclick": {
          "enable": true,
          "mode": "push"
        },
        "resize": true
      },
      "modes": {
        "grab": {
          "distance": 140,
          "line_linked": {
            "opacity": 1
          }
        },
        "push": {
          "particles_nb": 4
        }
      }
    },
    "retina_detect": true
  });
}

// Function to add custom cursor effect
function addCustomCursor(section) {
  // Create cursor elements
  const cursorOuter = document.createElement('div');
  cursorOuter.className = 'cursor-outer';
  
  const cursorInner = document.createElement('div');
  cursorInner.className = 'cursor-inner';
  
  document.body.appendChild(cursorOuter);
  document.body.appendChild(cursorInner);
  
  // Update cursor position
  document.addEventListener('mousemove', (e) => {
    cursorOuter.style.transform = `translate(${e.clientX}px, ${e.clientY}px)`;
    cursorInner.style.transform = `translate(${e.clientX}px, ${e.clientY}px)`;
    
    // Check if hovering over achievement cards
    const hoveredCard = document.elementFromPoint(e.clientX, e.clientY);
    if (hoveredCard && hoveredCard.closest('.achievement-card')) {
      cursorOuter.classList.add('cursor-hover');
      cursorInner.classList.add('cursor-hover');
    } else {
      cursorOuter.classList.remove('cursor-hover');
      cursorInner.classList.remove('cursor-hover');
    }
  });
  
  // Hide default cursor when inside the section
  section.addEventListener('mouseenter', () => {
    document.body.classList.add('custom-cursor');
  });
  
  section.addEventListener('mouseleave', () => {
    document.body.classList.remove('custom-cursor');
  });
  
  // Handle cursor click effect
  document.addEventListener('mousedown', () => {
    cursorOuter.classList.add('cursor-down');
    cursorInner.classList.add('cursor-down');
  });
  
  document.addEventListener('mouseup', () => {
    cursorOuter.classList.remove('cursor-down');
    cursorInner.classList.remove('cursor-down');
  });
}

// Add CSS for cosmic effects
const achievementStyles = document.createElement('style');
achievementStyles.textContent = `
  #achievements {
    position: relative;
    padding: 100px 0;
    min-height: 100vh;
    color: #ffffff;
    overflow: hidden;
    font-family: 'Inter', 'Poppins', sans-serif;
  }
  
  .cosmic-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(125deg, rgba(10,10,30,0.95) 0%, rgba(25,15,50,0.95) 50%, rgba(20,10,40,0.95) 100%);
    z-index: -3;
  }
  
  #achievements-particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
  }
  
  .nebula {
    position: absolute;
    border-radius: 50%;
    filter: blur(60px);
    opacity: 0.25;
    z-index: -2;
    transition: transform 0.7s cubic-bezier(0.22, 1, 0.36, 1);
  }
  
  .nebula-1 {
    width: 600px;
    height: 600px;
    background: radial-gradient(circle, rgba(120,50,255,0.6) 0%, rgba(50,0,100,0.2) 70%, rgba(0,0,0,0) 100%);
    top: -100px;
    left: -100px;
  }
  
  .nebula-2 {
    width: 700px;
    height: 700px;
    background: radial-gradient(circle, rgba(0,200,180,0.5) 0%, rgba(0,50,100,0.2) 60%, rgba(0,0,0,0) 100%);
    top: 30%;
    right: -200px;
  }
  
  .nebula-3 {
    width: 500px;
    height: 500px;
    background: radial-gradient(circle, rgba(255,50,150,0.4) 0%, rgba(100,0,50,0.2) 60%, rgba(0,0,0,0) 100%);
    bottom: -100px;
    left: 30%;
  }
  
  .section-title-container {
    position: relative;
    text-align: center;
    margin-bottom: 60px;
    z-index: 1;
  }
  
  .section-title {
    font-size: 3rem;
    font-weight: 800;
    text-transform: uppercase;
    letter-spacing: 2px;
    margin: 0;
    background: linear-gradient(45deg, #f5f5f5, #ffffff);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    position: relative;
    display: inline-block;
  }
  
  .title-text {
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
  }
  
  .neon-dot {
    color: #5D5DFF;
    text-shadow: 0 0 10px #5D5DFF, 0 0 20px #5D5DFF, 0 0 30px #5D5DFF;
    font-size: 1.5em;
    position: relative;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
  }
  
  .achievements-container {
    display: flex;
    flex-direction: column;
    gap: 30px;
    max-width: 800px;
    margin: 0 auto;
    position: relative;
    z-index: 1;
    padding: 0 20px;
  }
  
  .achievement-card {
    background: rgba(15, 15, 35, 0.7);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    padding: 30px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2),
                inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;
    transition: all 0.5s cubic-bezier(0.22, 1, 0.36, 1);
    border-left: 4px solid var(--card-color, #5D5DFF);
    cursor: pointer;
  }
  
  .achievement-card:hover, .achievement-card.expanded {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3),
                inset 0 0 0 1px rgba(255, 255, 255, 0.15),
                0 0 20px rgba(var(--card-color-rgb, 93, 93, 255), 0.4);
  }
  
  .achievement-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, 
                rgba(255, 255, 255, 0.1) 0%, 
                rgba(255, 255, 255, 0) 100%);
    z-index: 0;
  }
  
  .achievement-glow {
    position: absolute;
    width: 100px;
    height: 100px;
    background: radial-gradient(circle, var(--card-color, #5D5DFF) 0%, rgba(0,0,0,0) 70%);
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease;
    filter: blur(20px);
    z-index: -1;
  }
  
  .achievement-card:hover .achievement-glow {
    opacity: 0.15;
    animation: glow-move 3s infinite alternate;
  }
  
  @keyframes glow-move {
    0% { transform: translate(-50%, -50%) scale(1); }
    100% { transform: translate(150%, 150%) scale(1.5); }
  }
  
  .achievement-header {
    margin-bottom: 20px;
    position: relative;
    z-index: 1;
  }
  
  .achievement-header h3 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
    background: linear-gradient(45deg, #ffffff, var(--card-color, #5D5DFF));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  }
  
  .achievement-body {
    position: relative;
    z-index: 1;
  }
  
  .description {
    margin-bottom: 20px;
    line-height: 1.6;
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.9);
  }
  
  .tech-stack, .impact {
    margin-bottom: 20px;
  }
  
  .tech-stack h4, .impact h4 {
    font-size: 1.1rem;
    margin-bottom: 10px;
    color: var(--card-color, #5D5DFF);
    text-shadow: 0 0 5px rgba(var(--card-color-rgb, 93, 93, 255), 0.5);
  }
  
  .tech-stack ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .tech-stack li {
    background: rgba(255, 255, 255, 0.05);
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.85rem;
    white-space: nowrap;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
  }
  
  .tech-stack li:hover {
    background: rgba(var(--card-color-rgb, 93, 93, 255), 0.2);
    transform: translateY(-2px);
  }
  
  .impact p {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.9);
    line-height: 1.6;
    font-style: italic;
    border-left: 2px solid var(--card-color, #5D5DFF);
    padding-left: 15px;
  }
  
  .star-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
  }
  
  .star {
    position: absolute;
    background-color: #ffffff;
    border-radius: 50%;
    animation: twinkle 3s infinite alternate;
  }
  
  @keyframes twinkle {
    0% { opacity: 0.2; }
    100% { opacity: 1; }
  }
  
  .shooting-star {
    position: absolute;
    width: 150px;
    height: 2px;
    background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 50%, rgba(255,255,255,0) 100%);
    animation: shoot 1s linear forwards;
    z-index: -1;
  }
  
  @keyframes shoot {
    0% { transform: translateX(0) translateY(0) rotate(var(--angle)); opacity: 1; }
    100% { transform: translateX(300px) translateY(300px) rotate(var(--angle)); opacity: 0; }
  }
  
  /* Custom cursor styles */
  .custom-cursor {
    cursor: none;
  }
  
  .cursor-outer, .cursor-inner {
    position: fixed;
    border-radius: 50%;
    pointer-events: none;
    transform: translate(-50%, -50%);
    z-index: 9999;
    transition: width 0.2s, height 0.2s, background-color 0.2s, transform 0.1s;
  }
  
  .cursor-outer {
    width: 40px;
    height: 40px;
    border: 2px solid rgba(255, 255, 255, 0.5);
    transition: transform 0.15s ease-out, width 0.2s, height 0.2s;
  }
  
  .cursor-inner {
    width: 8px;
    height: 8px;
    background-color: #ffffff;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
    transition: transform 0.05s ease-out, width 0.2s, height 0.2s;
  }
  
  .cursor-outer.cursor-hover {
    width: 50px;
    height: 50px;
    border-color: var(--card-color, #5D5DFF);
    background-color: rgba(var(--card-color-rgb, 93, 93, 255), 0.1);
  }
  
  .cursor-inner.cursor-hover {
    width: 12px;
    height: 12px;
    background-color: var(--card-color, #5D5DFF);
  }
  
  .cursor-outer.cursor-down {
    width: 35px;
    height: 35px;
    transition: all 0.1s;
  }
  
  .cursor-inner.cursor-down {
    width: 15px;
    height: 15px;
    transition: all 0.1s;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .section-title {
      font-size: 2.5rem;
    }
    
    .achievement-card {
      padding: 20px;
    }
    
    .tech-stack ul {
      flex-direction: column;
    }
    
    .cursor-outer, .cursor-inner {
      display: none;
    }
    
    .custom-cursor {
      cursor: auto;
    }
  }
`;

document.head.appendChild(achievementStyles);

// Add CSS variables for RGB colors
const rgbStyles = document.createElement('style');
rgbStyles.textContent = `
  [data-index="0"] {
    --card-color-rgb: 79, 70, 229;
  }
  [data-index="1"] {
    --card-color-rgb: 16, 185, 129;
  }
  [data-index="2"] {
    --card-color-rgb: 236, 72, 153;
  }
`;
document.head.appendChild(rgbStyles);
    </script>
</body>
</html>